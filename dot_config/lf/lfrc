# lf https://github.com/gokcehan/lf

#
#   === Setting ===
#
set icons
set hidden
set anchorfind
# set dircounts
set dirfirst
set nodrawbox
# set errorfmt       "\033[7;31;47m%s\033[0m"
# set filesep        "\n"
set findlen        1
# set globsearch
set hiddenfiles    '.*'
set ignorecase
set ignoredia
# set incsearch
# set info           'size:time'
set mouse
# set number
# set period         0
set preview
set previewer ~/.config/lf/bin/previewer.sh
set cleaner ~/.config/lf/bin/clean.sh
# set promptfmt      "\033[34;15m  \033[0m\033[33;1m%u\033[0m:\033[36;1m%d\033[0m\033[1m%f\033[0m"
set promptfmt      "\033[30m\033[40m\033[34m \033[93;1m%u \033[96;1m %d\033[92m%f\033[0;30m\033[0m"
set ratios         '1:3:5'
# set relativenumber
# set reverse
set scrolloff      10   # leave some space at the top and the bottom of the screen
set shell          'sh'
# set shellflag      '-c'
set smartcase
# set smartdia
# set sortby         'natural'
set tabstop        2
# set timefmt        'Mon Jan _2 15:04:05 2006'
# set truncatechar   '~'
# set waitmsg        'Press any key to continue'
set wrapscan
# set wrapscroll
set shellopts '-eu'
set ifs "\n"


#
#   === Fuction ===
#
cmd colsfix ${{
    w=$(tput cols)
    if [ "$w" -le 80 ]; then
        lf -remote "send $id set ratios 3:5"
    else
        lf -remote "send $id set ratios 2:3:5"
    fi
}}

cmd open_with $"$@" $fx
cmd swallow_open_with $LANG=zh_CN.UTF-8 LC_ALL=zh_CN.UTF-8 swl "$@" $fx

cmd open ${{
    type=$(mimeo -m $f | tail -n 1 | tr -d ' ')
    case $type in
        text/*|application/json|application/x-shellscript|application/x-wine-extension-ini|application/x-md|application/x-yaml|application/toml) 
            $EDITOR $f;;
        application/pdf|application/epub+zip) 
            swl zathura $f;;
        image/png|image/jpeg) 
            swl nsxiv $fx;;
        image/gif) 
            swl nsxiv -a $fx;;
        video/*|audio/*) 
            swl mpv --player-operation-mode=pseudo-gui $f;;
        *) handlr launch $type $f &>/dev/null;;
    esac
}}

cmd jump %{{
    res=$(zoxide query --exclude "$PWD" "${1:-}")
    if [[ -d "$res" ]];then
        lf --remote "send $id cd '$res'"
    else
        lf --remote "echoerr 'Not found!'"
    fi
}}

cmd jumpall ${{
    res=$(zoxide query -ls "${1:-}" | fzf)
    if [[ -d "$res" ]];then
        lf --remote "send $id cd '$res'"
    else
        lf --remote "echoerr 'Not found!'"
    fi
}}

cmd on-cd &{{
    zoxide add -- "$PWD"
}}

cmd paste &{{
    set -- $(cat ~/.local/share/lf/files)
    mode="$1"
    shift
    name=$(basename "$@")
    while [ -f "$name" ] || [ -d "$name" ];do
        name="${name}_"
    done
    case "$mode" in
        copy) cp -rn -- "$@" "$name";;
        move) mv -n -- "$@" "$name";;
    esac
    rm ~/.local/share/lf/files
    lf -remote "send clear"
    lf -remote "send $id reload"
}}

cmd bulk_rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    [ -z "$fs" ] && fs="$(ls)"
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l "$new" | cut -d ' ' -f1)" -ne "$(wc -l "$old" | cut -d ' ' -f1)" ] && exit 1
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" == "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

cmd newfold %{{
    set -f
    mkdir -- "$1"
    mv -- $fx "$1"
}}

cmd link %{{
    if [ -z "$fs" ]; then
        lf -remote "send $id echo no files to link"
        exit 0
    fi
    IFS=$'\n' 
    files=($fs)
    case "$1" in
        soft)
            for file in ${files[@]};do
                ln -sr -t . -- "$file" || break
            done
            ;;
        hard)
            for file in ${files[@]};do
                ln -t . -- "$file" || break
            done
            ;;
        *) exit 0;;
    esac
    lf -remote "send $id unselect"
}}

cmd set_wallpaper ${{
    if [ -n "$DISPLAY" ];then
        feh --bg-fill "$f"
    fi
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

cmd trash %trash-put $fx
cmd source_lfrc :source ~/.config/lf/lfrc
cmd edit_lfrc $$EDITOR ~/.config/lf/lfrc;


# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx - "
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract %{{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar %{{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
    lf -remote "send $id unselect"
}}

# compress current file or selected files with zip
cmd zip %{{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
    lf -remote "send $id unselect"
}}


#
#   === Starup ===
#
colsfix


#
#  === Keybind ===
#
map <m-up>    up
map <m-down>  down
map <enter> shell
map <space> toggle
map J :toggle; down
map K :toggle; up
map <c-q> :quit
map c
map ca :unselect; clear
map cc clear
map cu unselect
map x $$f
map X !$f

map sp :set_wallpaper
map sx $chmod +x $f
map t
map te extract
map ta push :tar<space>
map tz push :zip<space>
map an push :newfold<space>
map ad push %mkdir<space>
map af push %touch<space>
map as :link soft
map ah :link hard
map r 
map rr rename
map re :rename; cmd-word-back; cmd-left
map rs :bulk_rename
map i $[ -f "$f" ] && exiftool $f | less
map o push :open_with<space>
map O push :swallow_open_with<space>
map d
map y
map p
map dd cut
map dD delete $fx
map dt trash
map yy copy
map yp &greenclip print $PWD
map yf &greenclip print $f
map pp paste

map b mark-load
map M mark-remove
map ga push :jump<space>
map gA push :jumpall<space>
map gD cd ~/Documents
map gd cd ~/Downloads
map gm cd ~/Music
map gv cd ~/Videos
map gp cd ~/Pictures
map gs cd ~/.local/share
map gc cd ~/.config

map <f-5> source_lfrc
map <f-4> :edit_lfrc;source_lfrc
map <esc> :redraw;colsfix
map <C-r> :reload

map P set preview!
map B set drawbox!
map <backspace> set hidden!
cmap <tab>   cmd-menu-complete
cmap <backtab> cmd-menu-complete-back
cmap <up>    cmd-history-prev
cmap <down>  cmd-history-next
